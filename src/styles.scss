/* You can add global styles to this file, and also import other style files */
@import "../node_modules/angular-calendar/scss/angular-calendar.scss";
@import "primeicons/primeicons.css";


.dark-theme {
  // First define some global color variables for your app, these are just for the demo, they can be anything you like
  $bg-dark-primary: #1f262d;
  $bg-dark-secondary: #394046;
  $bg-active: #2c343a;
  $text-color: #d5d6d7;
  $border-color: rgb(0 0 0 / 60%);

  // Call the calendar mixin with a sass color map of your theme. Every property is optional.
  // For a list of all variables and how they are used,
  // see https://github.com/mattlewis92/angular-calendar/tree/main/projects/angular-calendar/src/variables.scss
  @include cal-theme(
    (
      bg-primary: $bg-dark-primary,
      bg-secondary: $bg-dark-secondary,
      weekend-color: indianred,
      bg-active: $bg-active,
      border-color: $border-color,
      gray: $bg-dark-secondary,
      today-bg: $bg-dark-secondary,
      event-color-primary: $bg-dark-secondary,
    )
  );

  // How to override a non themable property, this was copied from chrome -> inspect element -> styles panel
  .cal-month-view .cal-day-cell.cal-out-month .cal-day-number {
    opacity: 0.15;
  }

  // Everything else below is just themes the demo, it's probably not relevant to your app
  background-color: $bg-dark-primary;
  color: $text-color;

  .card {
    border-color: $border-color;
  }

  .card-header {
    background-color: $bg-dark-secondary;
  }

  .card-body {
    background-color: $bg-dark-primary;
  }

  .nav-tabs {
    border-bottom-color: $border-color;
  }

  .nav-tabs .nav-link.active {
    background-color: $bg-dark-primary;
    color: $text-color;
    border-color: $border-color;
  }

  .nav-tabs .nav-link:hover,
  .nav-tabs .nav-link:focus {
    border-color: $border-color;
  }
}

// Import Bootstrap CSS for layout and utility classes

// Bootstrap-like Grid System
.container {
  width: 100%;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  margin-right: auto;
  margin-left: auto;
}

@media (min-width: 576px) {
  .container {
    max-width: 540px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 720px;
  }
}

@media (min-width: 992px) {
  .container {
    max-width: 960px;
  }
}

@media (min-width: 1200px) {
  .container {
    max-width: 1140px;
  }
}

@media (min-width: 1400px) {
  .container {
    max-width: 1320px;
  }
}

.container-fluid {
  width: 100%;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
  margin-right: auto;
  margin-left: auto;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -0.75rem;
  margin-left: -0.75rem;
}

.col {
  flex: 1 0 0%;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}

// Generate column classes for all breakpoints
@mixin make-col($size, $columns: 12) {
  flex: 0 0 auto;
  width: percentage($size / $columns);
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}

// Extra small devices (portrait phones, less than 576px)
@for $i from 1 through 12 {
  .col-#{$i} {
    @include make-col($i);
  }
}

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) {
  @for $i from 1 through 12 {
    .col-sm-#{$i} {
      @include make-col($i);
    }
  }
  .col-sm {
    flex: 1 0 0%;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) {
  @for $i from 1 through 12 {
    .col-md-#{$i} {
      @include make-col($i);
    }
  }
  .col-md {
    flex: 1 0 0%;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Large devices (desktops, 992px and up)
@media (min-width: 992px) {
  @for $i from 1 through 12 {
    .col-lg-#{$i} {
      @include make-col($i);
    }
  }
  .col-lg {
    flex: 1 0 0%;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
  @for $i from 1 through 12 {
    .col-xl-#{$i} {
      @include make-col($i);
    }
  }
  .col-xl {
    flex: 1 0 0%;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Extra extra large devices (larger desktops, 1400px and up)
@media (min-width: 1400px) {
  @for $i from 1 through 12 {
    .col-xxl-#{$i} {
      @include make-col($i);
    }
  }
  .col-xxl {
    flex: 1 0 0%;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Offset classes
@mixin make-col-offset($size, $columns: 12) {
  margin-left: percentage($size / $columns);
}

@for $i from 0 through 11 {
  .offset-#{$i} {
    @include make-col-offset($i);
  }
}

@media (min-width: 576px) {
  @for $i from 0 through 11 {
    .offset-sm-#{$i} {
      @include make-col-offset($i);
    }
  }
}

@media (min-width: 768px) {
  @for $i from 0 through 11 {
    .offset-md-#{$i} {
      @include make-col-offset($i);
    }
  }
}

@media (min-width: 992px) {
  @for $i from 0 through 11 {
    .offset-lg-#{$i} {
      @include make-col-offset($i);
    }
  }
}

@media (min-width: 1200px) {
  @for $i from 0 through 11 {
    .offset-xl-#{$i} {
      @include make-col-offset($i);
    }
  }
}

@media (min-width: 1400px) {
  @for $i from 0 through 11 {
    .offset-xxl-#{$i} {
      @include make-col-offset($i);
    }
  }
}

// Auto layout columns
.col-auto {
  flex: 0 0 auto;
  width: auto;
  padding-right: 0.75rem;
  padding-left: 0.75rem;
}

@media (min-width: 576px) {
  .col-sm-auto {
    flex: 0 0 auto;
    width: auto;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

@media (min-width: 768px) {
  .col-md-auto {
    flex: 0 0 auto;
    width: auto;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

@media (min-width: 992px) {
  .col-lg-auto {
    flex: 0 0 auto;
    width: auto;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

@media (min-width: 1200px) {
  .col-xl-auto {
    flex: 0 0 auto;
    width: auto;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

@media (min-width: 1400px) {
  .col-xxl-auto {
    flex: 0 0 auto;
    width: auto;
    padding-right: 0.75rem;
    padding-left: 0.75rem;
  }
}

// Flexbox utilities for rows
.row.no-gutters {
  margin-right: 0;
  margin-left: 0;
  
  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.justify-content-evenly {
  justify-content: space-evenly !important;
}

.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}


html, body {
  margin: 0;
  padding: 0;

  height: 100%;
  font-family: Arial, Helvetica, sans-serif;
}

.container {
  padding: 20px;
}

/* Custom utility classes similar to Tailwind */
.flex {
  display: flex;
}

.justify-between {
  justify-content: space-between;
}

.items-center {
  align-items: center;
}


.gap-2 {
  gap: 0.5rem;
}

.gap-4 {
  gap: 1rem;
}

.mb-4 {
  margin-bottom: 1rem;
}

.p-4 {
  padding: 1rem;
}

.font-bold {
  font-weight: bold;
}

.text-lg {
  font-size: 1.125rem;
}

p-fileupload.hide-progressbar .p-progressbar {
  display: none !important;
}

p-fileupload.hide-progressbar .p-fileupload-content {
  display: none !important;
}

p-fileupload.hide-progressbar .p-fileupload-header {
  display: flex !important;
  justify-content: center !important;
  align-items: center !important;
}